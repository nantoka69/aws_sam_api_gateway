AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Resources:
  MyLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: my_module.lambda_handler_long
      Runtime: python3.12
      Architectures:
        - x86_64
      CodeUri: ./lambda
      MemorySize: 128
      Timeout: 60
      Policies:
        - AWSLambdaBasicExecutionRole

  MyApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: MyApi

  ApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt MyApi.RootResourceId
      PathPart: invoke
      RestApiId: !Ref MyApi

  ApiMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref ApiResource
      RestApiId: !Ref MyApi
      Integration:
        Type: AWS
        RequestParameters:
          integration.request.header.X-Amz-Invocation-Type: "'Event'"
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json: |
                {
                  "message": "Request accepted and is being processed asynchronously."
                }
        IntegrationHttpMethod: POST
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations'
          - LambdaArn: !GetAtt MyLambdaFunction.Arn
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: Empty

  ApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn: ApiMethod
    Properties:
      RestApiId: !Ref MyApi
      StageName: Prod

  LambdaApiPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt MyLambdaFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'

Outputs:
  TestFunction:
    Description: "API Gateway endpoint"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/invoke/"

